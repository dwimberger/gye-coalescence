<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- Coalescence Build File                               -->
<!-- ======================================================================= -->
<project name="coalescence" default="compile" basedir=".">

  <target name="init">
    <tstamp>
      <format property="src.timestamp" pattern="dd/MM/yyyy"/>
      <format property="year" pattern="2002-yyyy"/>
    </tstamp>

    <!-- Allow any user specific values to override the defaults -->
    <property file="build.properties"/>
    <property file="${user.home}/.build.properties"/>

    <property name="Name" value="coalescence"/>
    <property name="name" value="coalescence"/>
    <property name="version" value="0.1"/>
    <property name="copyright" value="${year} Dieter Wimberger"/>

    <!-- Filters -->
    <filter token="date" value="${src.timestamp}"/>
    <filter token="version" value="${version}"/>
    <filter token="copyright" value="${copyright}"/>

    <!-- Source related properties -->
    <property name="src.dir" value="${basedir}${file.separator}src"/>
    <property name="src.java" value="${src.dir}${file.separator}java"/>
    <property name="base.src.java" value="${basedir}/src/java"/>
    <property name="src.manifest" value="${src.dir}/META-INF/MANIFEST.MF"/>
    <property name="lib.dir" value="${basedir}${file.separator}lib${file.separator}"/>
    <property name="src.excludes" value=""/>

    <!-- Build related properties -->
    <property name="build.dir" value="${basedir}${file.separator}build"/>
    <property name="build.src" value="${build.dir}${file.separator}src"/>
  
    <property name="build.classes" value="${build.dir}${file.separator}classes"/>
    <property name="build.javadocs" value="${basedir}${file.separator}docs${file.separator}api"/>
    <property name="build.jar" value="${build.dir}${file.separator}${name}.jar"/>
    <path id="build.classpath">
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>

    </path>
     <property name="build.dist" value="${build.dir}${file.separator}${name}-${version}"/>

    <property name="dist.basedir" value="${build.dir}"/>
    <property name="dist.includes" value="${name}${file.separator}**"/>
    <property name="dist.excludes"
      value="**/prj/**,
            **/dist/**,
             **/test/**,
             **/model/**,
             **/build/**,
             **/.DS_Store"
      />
    <property name="packages" value="mx.unam.ecologia.coalescence.*"/>
    <property name="library.includes" value="mx${file.separator}**"/>

  </target>

  <!-- =================================================================== -->
  <!-- Basic build targets                                                 -->
  <!-- =================================================================== -->
  <target name="prepare-sources" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.src}"/>
    <!-- specific filters -->
    <filter token="commentstart" value="${line.separator}"/>
    <filter token="commentend" value=""/>

    <copy todir="${build.src}" filtering="true">
      <fileset dir="${src.java}" excludes="${src.excludes}"/>
    </copy>

    <!-- copy encuentro sources -->
    <copy todir="${build.src}" filtering="true">
      <fileset dir="${base.src.java}" excludes="${src.excludes}"/>
    </copy>
    
    <!-- copy resources
    <copy todir="${build.src}" filtering="true">
      <fileset dir="${src.dir}/resources"/>
    </copy>
    -->
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source code                                            -->
  <!-- =================================================================== -->
  <target name="compile" depends="init, prepare-sources" description="Compiles the sources. (Default)">
    <!-- Echo compilation properties -->
    <echo level="info" message="Compiler    = ${build.compiler}"/>
    <echo level="info" message="Optimize    = ${compile.optimize}"/>
    <echo level="info" message="Deprecation = ${compile.deprecation}"/>
    <echo level="info" message="Debug       = ${compile.debug}"/>

    <mkdir dir="${build.classes}"/>
    <javac srcdir="${build.src}"
      destdir="${build.classes}"
      debug="${compile.debug}"
      optimize="${compile.optimize}"
      deprecation="${compile.deprecation}"
    >
    
    <classpath refid="build.classpath"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar archive                                             -->
  <!-- =================================================================== -->
  <target name="jar" depends="init,compile" description="Builds the library (.jar).">
    <jar jarfile="${build.jar}"
      basedir="${build.classes}"
      includes="${library.includes}"
    >
    <manifest>
      <attribute name="Built-By" value="${user.name}"/>
    </manifest>
    </jar>
  </target>


  <!-- =================================================================== -->
  <!-- Create gzipped tarball                                              -->
  <!-- =================================================================== -->
  <target name="dist" depends="init,compile,jar">
    <mkdir dir="${build.dist}"/>
    <tar tarfile="${build.dist}${file.separator}${Name}${version}.tar"
      basedir="${dist.basedir}"
      includes="${dist.includes}"
      excludes="${dist.excludes}"
      />
    <gzip zipfile="${build.dist}${file.separator}${Name}${version}.tar.gz" src="${build.dist}${file.separator}${Name}${version}.tar"/>
    <delete file="${build.dist}${file.separator}${Name}${version}.tar"/>

  </target>

  <!-- =================================================================== -->
  <!-- Create zip distribution                                             -->
  <!-- =================================================================== -->
  <target name="zipdist" depends="init,compile,jar">
    <mkdir dir="${build.dist}"/>
    <zip zipfile="${build.dist}${file.separator}${Name}${version}.zip"
      basedir="${dist.basedir}"
      includes="${dist.includes}"
      excludes="${dist.excludes}"
      />
  </target>


  <!-- =================================================================== -->
  <!-- Create docs distribution                                            -->
  <!-- =================================================================== -->
  <target name="docsdist" depends="init,javadocs">
    <zip zipfile="${build.dist}${file.separator}${Name}${version}_docs.zip"
      basedir="${basedir}"
      includes="docs/**"
      />
  </target>

  <!-- =================================================================== -->
  <!-- Generate release                                                    -->
  <!-- =================================================================== -->
  <target name="release" depends="clean-all,jar,javadocs,dist,zipdist">
    <echo message="Created release ${version}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="init,prepare-sources">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
      sourcepath="${build.src}"
      classpath="${build.classpath}"
      destdir="${build.javadocs}"
      author="true"
      version="true"
      windowtitle="${Name} API"
      doctitle="${Name} API Documentation"
      bottom="Copyright &#169; ${copyright}"
      additionalparam="${javadocs.additionalparam}"
      />
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up generated classes                                         -->
  <!-- =================================================================== -->
  <target name="clean-classes" depends="init">
    <delete dir="${build.classes}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Cleans up generated javadocs                                        -->
  <!-- =================================================================== -->
  <target name="clean-docs" depends="init">
    <delete dir="${build.javadocs}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up generated jars                                             -->
  <!-- =================================================================== -->
  <target name="clean-jars" depends="init">
    <delete file="${build.jar}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Cleans up generated distributions                               -->
  <!-- =================================================================== -->
  <target name="clean-dist" depends="init">
    <delete dir="${build.dist}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Cleans up all                                                       -->
  <!-- =================================================================== -->
  <target name="clean-all" depends="clean-classes,clean-jars, clean-dist">
    <echo message="Cleaned all."/>
  </target>

</project>

